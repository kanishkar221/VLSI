$date
	Mon Sep  8 12:23:45 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_rca $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 ) c3 $end
$var wire 1 * c2 $end
$var wire 1 + c1 $end
$scope module fa0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 + cout $end
$var wire 1 . sum $end
$var wire 1 / s1 $end
$var wire 1 0 c2 $end
$var wire 1 1 c1 $end
$scope module ha1 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 1 carry $end
$var wire 1 / sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 / a $end
$var wire 1 % b $end
$var wire 1 0 carry $end
$var wire 1 . sum $end
$upscope $end
$upscope $end
$scope module fa1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 + cin $end
$var wire 1 * cout $end
$var wire 1 4 sum $end
$var wire 1 5 s1 $end
$var wire 1 6 c2 $end
$var wire 1 7 c1 $end
$scope module ha1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 7 carry $end
$var wire 1 5 sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 5 a $end
$var wire 1 + b $end
$var wire 1 6 carry $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 : sum $end
$var wire 1 ; s1 $end
$var wire 1 < c2 $end
$var wire 1 = c1 $end
$scope module ha1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 = carry $end
$var wire 1 ; sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 ; a $end
$var wire 1 * b $end
$var wire 1 < carry $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 ) cin $end
$var wire 1 " cout $end
$var wire 1 @ sum $end
$var wire 1 A s1 $end
$var wire 1 B c2 $end
$var wire 1 C c1 $end
$scope module ha1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 C carry $end
$var wire 1 A sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 A a $end
$var wire 1 ) b $end
$var wire 1 B carry $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
15
14
13
02
01
00
1/
1.
0-
1,
0+
0*
0)
b11 (
b10 '
b1 &
0%
b10 $
b1 #
0"
b11 !
$end
#10000
1@
1)
1<
1*
04
16
0.
1+
b1000 !
b1000 (
0:
0/
11
1;
1-
18
b11 $
b11 '
b101 #
b101 &
#20000
1"
b0 !
b0 (
0@
1B
1A
03
12
1>
b1 $
b1 '
b1111 #
b1111 &
#30000
1"
0@
1B
1)
0:
1<
1*
04
16
10
1+
1/
01
b0 !
b0 (
0.
19
0,
08
1%
b101 $
b101 '
b1010 #
b1010 &
#40000
